#!/bin/bash
set -e
# Put this file in .git/hooks to activate it.
#
# A hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# Information about the commits that are being pushed is supplied as lines to
# standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# TODO(janakr): add configuration to disable individual checks.

z40=0000000000000000000000000000000000000000

# Prevent pushes with a dirty working directory. User can still accidentally
# fail to push some changes if there are no other commits to push, because
# this trigger won't even be hit then (git will say everything is up to date).
if [[ $(git diff --name-only HEAD) ]]; then
  echo "Uncommitted changes exist: "
  git diff --name-only HEAD
  exit 1
fi

while read local_ref local_sha remote_ref remote_sha; do
  if [ "$local_sha" = $z40 ]; then
    # Handle delete?
    exit 0
  else
    # Examine all changes since master. This will catch a badly formatted file
    # every time, but also means you can safely push with --no-verify once and
    # still catch problems on subsequent pushes.
    range="master..$local_sha"
  fi

  # --diff-filter=dr excludes deleted and renamed files, which don't exist
  # locally anymore.
  # TODO(janakr): this is vulnerable to filenames with spaces.
  modified_js_files="$(git diff --diff-filter=dr --name-only \
      "$range" 'client-side/static/*.js' 'cypress/integration/**/*.js' \
        'cypress/support/*.js')"
  if [[ "$modified_js_files" ]]; then
    # Run clang-format. If there are any replacements, they'll be printed to
    # the console in the form "<replacement ...". Because grep matches that,
    # it'll succeed, so we can fail.
    # TODO(janakr): the file that caused the failure isn't shown, but user
    # should format all files anyway.
    if clang-format --style=Google -output-replacements-xml $modified_js_files \
        | grep -c '<replacement ' >/dev/null; then
        for eachfile in $modified_js_files; do
          clang-format --style=Google -output-replacements-xml $eachfile | grep -c '<replacement ' > /dev/null && echo "$eachfile needs formatting"
        done
        exit 1
    fi
    yarn run eslint $modified_js_files
  fi
  yarn run cypress run --config video=false
done

exit 0
